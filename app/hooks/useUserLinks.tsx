// hooks/useUserLinks.ts
"use client"
import { useEffect, useState } from "react";
import { collection, getDocs, query } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { db } from "@/firebase.config"; // Adjust the import path as needed
import { useRouter } from "next/navigation";

interface Link {
  id: string;
  url: string;
  platform: string;
}

const useUserLinks = () => {
  const [links, setLinks] = useState<Link[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const fetchLinks = async () => {
      const user = getAuth().currentUser;
      if (user) {
        const userId = user.uid;
        try {
          const linksCollection = collection(db, "links", userId, "links");
          const q = query(linksCollection);
          const querySnapshot = await getDocs(q);
          const linksData: Link[] = querySnapshot.docs.map(doc => ({
            id: doc.id,
            ...(doc.data() as Omit<Link, 'id'>) // Assuming 'id' is generated by Firestore
          }));
          console.log(linksData)
          setLinks(linksData);
        } catch (error) {
          setError("Error fetching links");
          console.error("Error fetching links:", error);
        } finally {
          setLoading(false);
        }
      } else {
        setError("User not authenticated");
        setLoading(false);
        router.push("/"); // Redirect to login page if user is not authenticated
      }
    };

    fetchLinks();
  }, [router]);

  return { links, loading, error };
};

export  {useUserLinks};
