// hooks/useUserLinks.ts
"use client"
import { useEffect, useState } from "react";
import { collection, query , doc, where, onSnapshot} from "firebase/firestore";
import { getAuth } from "firebase/auth";
import { db } from "@/firebase.config"; // Adjust the import path as needed
import { useRouter } from "next/navigation";
import { GetCookies } from "@/lib/cookies";

interface Link {
  id: string;
  url: string;
  platform: string;
}

const useUserLinks = () => {
  const [links, setLinks] = useState<Link[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const credential = GetCookies()
console.log(credential)
  // useEffect(() => {
  //   const fetchLinks = async () => {
  //     if (credential) {
  //       const userId = credential.user.uid;
  //       console.log(userId)
  //       try {
  //         const linksCollection = collection(db, "links");
  //         const q = query(linksCollection, where("userId", "==", user.uid));
  //         const unsubscribe = onSnapshot(q, (snapshot :any) => {
  //           const linksData = snapshot.docs.map(doc  => ({
  //             id: doc.id,
  //             ...(doc.data() as Omit<Link, 'id'>) // Assuming 'id' is generated by Firestore
  //           }));
  //           setLinks(linksData);
  //         });
  //         // setLinks(linksData);
  //       } catch (error) {
  //         setError("Error fetching links");
  //         console.error("Error fetching links:", error);
  //       } finally {
  //         setLoading(false);
  //       }
  //     } else {
  //       setError("User not authenticated");
  //       setLoading(false);
  //       router.push("/"); // Redirect to login page if user is not authenticated
  //     }
  //   };

  //   fetchLinks();
  // }, [router]);

  return { links, loading, error };
};

export  {useUserLinks};
